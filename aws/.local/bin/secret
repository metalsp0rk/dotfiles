#!/usr/bin/env bash


if [ -z $AWS_DEFAULT_REGION ]; then
  export AWS_DEFAULT_REGION=us-east-1
fi
help() {
  cat <<EOF
secret - A tool to retrieve and store secrets in AWS SSM Parameters

Usage:
  secret [command]

Available Commands:
  list        List all secrets in AWS SSM Parameter Store
  find        Find secrets in AWS SSM Parameter Store
  get         Retrieve a secret from AWS SSM Parameter Store
  set         Store or overwrite a secret in AWS SSM Parameter Store
  generate    Generate a password and store it in AWS SSM Parameter Store, takes password length as a parameter
  help        Shows this help message

Flags:
  -r, --region string    AWS region to use [default: us-east-1]
  -h, --help             help for secret

Examples:
  secret -r us-east-1 get /path/to/secret
  secret -r us-east-1 set /path/to/secret [value]
  secret get /path/to/secret
  secret set /path/to/secret [value]
  secret generate /path/to/secret 36

EOF
}

confirm() {
  while true; do
    echo "This operation will overwrite the value of $1"
    echo "Are you sure? (y/n)"
    read -r CONFIRM
    case $CONFIRM in
      [Nn]* ) echo "Aborting"; exit 1;;
      [Yy]* ) break;;
      * ) echo "Please answer y/n.";;
    esac
  done
}


get_secret() {
  if [ -z $AWS_PROFILE ]; then
    export AWS_PROFILE=$(_awsp)
  fi
  if [ $# -eq 0 ]; then
    echo "Missing path to secret"
    exit 1
  fi

  aws ssm get-parameter --name $1 --with-decryption --output text --query Parameter.Value | cat
}

generate_secret() {
  if [ -z $AWS_PROFILE ]; then
    export AWS_PROFILE=$(_awsp)
  fi
  if [ $# -lt 2 ]; then
    echo "Missing length of password, defaulting to 36"
    LENGTH=36
    if [ $# -eq 0 ]; then
      echo "Missing path to secret"
      exit 1
    fi
  else
    LENGTH=$2
    SECPATH=$1
  fi
  confirm $1

  echo "Generating password"
  GENERATED=$(pwgen -s $LENGTH 1)
  aws ssm put-parameter --name $1 --value ${GENERATED} --type SecureString --overwrite >/dev/null
  echo "Password generated and stored in $1"
}

set_secret() {
  if [ -z $AWS_PROFILE ]; then
    export AWS_PROFILE=$(_awsp)
  fi
  if [$# -lt 2 ]; then
    echo "Missing path to secret or value"
    exit 1
  fi
  confirm $1

  echo "Putting value to $1"
  aws ssm put-parameter --name $1 --value $2 --type SecureString --overwrite >/dev/null
}

find_secret() {
  if [ -z $AWS_PROFILE ]; then
    export AWS_PROFILE=$(_awsp)
  fi
  if [ $# -eq 0 ]; then
    echo "Missing search term"
    exit 1
  fi
  aws ssm describe-parameters| jq -r ".Parameters[].Name | select(contains(\"$1\"))"
}

list_secrets() {
  if [ -z $AWS_PROFILE ]; then
    export AWS_PROFILE=$(_awsp)
  fi
  aws ssm describe-parameters | jq -r '.Parameters[].Name'
}

if [ $# -eq 0 ]; then
  help
  exit 1
fi


while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      help
      exit 0
      ;;
    get)
      shift
      get_secret $@
      exit 0
      ;;
    set)
      shift
      set_secret $@
      exit 0
      ;;
    list)
      shift
      list_secrets $@
      exit 0
      ;;
    find)
      shift
      find_secret $@
      exit 0
      ;;
    generate)
      shift
      generate_secret $@
      exit 0
      ;;
    -p|--profile)
      shift
      export AWS_PROFILE=$1
      shift
      ;;
    -r|--region)
      shift
      export AWS_DEFAULT_REGION=$1
      shift
      ;;
    *)
      echo "Unknown argument: $1"
      exit 1
      ;;
  esac
done
